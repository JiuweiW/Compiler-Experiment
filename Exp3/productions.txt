<s> -> ['<translation_unit>'] Select: set(['#', 'short', 'int', 'double', 'float', 'long', 'null'])
<translation_unit> -> ['<external_declaration>', '<translation_unit>'] Select: set(['short', 'int', 'double', 'float', 'long'])
<external_declaration> -> ['<func_declaration>'] Select: set(['short', 'int', 'double', 'float', 'long'])
<func_declaration> -> ['<declaration_specifiers>', '<declarator>', '<declaration_list>', '<compound_stmt>'] Select: set(['short', 'int', 'double', 'float', 'long'])
<declaration_specifiers> -> ['<type_specifier>', 'ID', 'P31'] Select: set(['short', 'int', 'double', 'float', 'long'])
<type_specifier> -> ['int', 'P11'] Select: set(['int'])
<declarator> -> ['(', '<parameter_type_list>', ')'] Select: set(['('])
<parameter_type_list> -> ['null'] Select: set([')'])
<declaration_list> -> ['null'] Select: set(['ID', 'while', '{', 'null', '}', ';', 'if'])
<compound_stmt> -> ['{', '<declaration_list>', '<stmt_list>', '}'] Select: set(['{'])
<declaration_list> -> ['null'] Select: set(['ID', 'while', '{', 'null', '}', ';', 'if'])
<stmt_list> -> ['null'] Select: set(['}'])
<translation_unit> -> ['<external_declaration>', '<translation_unit>'] Select: set(['short', 'int', 'double', 'float', 'long'])
<external_declaration> -> ['<func_declaration>'] Select: set(['short', 'int', 'double', 'float', 'long'])
<func_declaration> -> ['<declaration_specifiers>', '<declarator>', '<declaration_list>', '<compound_stmt>'] Select: set(['short', 'int', 'double', 'float', 'long'])
<declaration_specifiers> -> ['<type_specifier>', 'ID', 'P31'] Select: set(['short', 'int', 'double', 'float', 'long'])
<type_specifier> -> ['int', 'P11'] Select: set(['int'])
<declarator> -> ['(', '<parameter_type_list>', ')'] Select: set(['('])
<parameter_type_list> -> ['null'] Select: set([')'])
<declaration_list> -> ['null'] Select: set(['ID', 'while', '{', 'null', '}', ';', 'if'])
<compound_stmt> -> ['{', '<declaration_list>', '<stmt_list>', '}'] Select: set(['{'])
<declaration_list> -> ['<declaration>', 'P22', '<declaration_list>'] Select: set(['short', 'int', 'double', 'float', 'long'])
<declaration> -> ['<declaration_specifiers>', 'P21', ';'] Select: set(['short', 'int', 'double', 'float', 'long'])
<declaration_specifiers> -> ['<type_specifier>', 'ID', 'P31'] Select: set(['short', 'int', 'double', 'float', 'long'])
<type_specifier> -> ['int', 'P11'] Select: set(['int'])
<declaration_list> -> ['<declaration>', 'P22', '<declaration_list>'] Select: set(['short', 'int', 'double', 'float', 'long'])
<declaration> -> ['<declaration_specifiers>', 'P21', ';'] Select: set(['short', 'int', 'double', 'float', 'long'])
<declaration_specifiers> -> ['<type_specifier>', 'ID', 'P31'] Select: set(['short', 'int', 'double', 'float', 'long'])
<type_specifier> -> ['float', 'P12'] Select: set(['float'])
<declaration_list> -> ['<declaration>', 'P22', '<declaration_list>'] Select: set(['short', 'int', 'double', 'float', 'long'])
<declaration> -> ['<declaration_specifiers>', 'P21', ';'] Select: set(['short', 'int', 'double', 'float', 'long'])
<declaration_specifiers> -> ['<type_specifier>', 'ID', 'P31'] Select: set(['short', 'int', 'double', 'float', 'long'])
<type_specifier> -> ['int', 'P11'] Select: set(['int'])
<declaration_list> -> ['<declaration>', 'P22', '<declaration_list>'] Select: set(['short', 'int', 'double', 'float', 'long'])
<declaration> -> ['<declaration_specifiers>', 'P21', ';'] Select: set(['short', 'int', 'double', 'float', 'long'])
<declaration_specifiers> -> ['<type_specifier>', 'ID', 'P31'] Select: set(['short', 'int', 'double', 'float', 'long'])
<type_specifier> -> ['float', 'P12'] Select: set(['float'])
<declaration_list> -> ['null'] Select: set(['ID', 'while', '{', 'null', '}', ';', 'if'])
<stmt_list> -> ['<stmt>', '<stmt_list>'] Select: set(['ID', 'while', '{', ';', 'if'])
<stmt> -> ['<expression_stmt>'] Select: set([';', 'ID'])
<expression_stmt> -> ['<expression>', ';'] Select: set(['ID'])
<expression> -> ['ID', '=', '<unary_expression>', 'P62', '<factor_expression>', 'P61'] Select: set(['ID'])
<unary_expression> -> ['<primary_expression>>', 'P62', '<factor_expression>', 'P61'] Select: set(['ID'])
<unary_expression> -> ['<primary_expression>', 'P71'] Select: set(['SHORT', 'STRING_LITERAL', 'INT', '(', 'FLOAT', 'LONG', 'ID'])
<primary_expression> -> ['ID', 'P51'] Select: set(['ID'])
-> ['null'] Select: set([')', ';'])
<stmt_list> -> ['<stmt>', '<stmt_list>'] Select: set(['ID', 'while', '{', ';', 'if'])
<stmt> -> ['<selection_stmt>'] Select: set(['if'])
<selection_stmt> -> ['if', '(', '<primary_expression>', ')', 'P81', '<stmt>', 'P82'] Select: set(['if'])
<primary_expression> -> ['ID', 'P51'] Select: set(['ID'])
<stmt> -> ['<compound_stmt>'] Select: set(['{'])
<compound_stmt> -> ['{', '<declaration_list>', '<stmt_list>', '}'] Select: set(['{'])
<declaration_list> -> ['null'] Select: set(['ID', 'while', '{', 'null', '}', ';', 'if'])
<stmt_list> -> ['<stmt>', '<stmt_list>'] Select: set(['ID', 'while', '{', ';', 'if'])
<stmt> -> ['<expression_stmt>'] Select: set([';', 'ID'])
<expression_stmt> -> ['<expression>', ';'] Select: set(['ID'])
<expression> -> ['ID', '=', '<unary_expression>', 'P62', '<factor_expression>', 'P61'] Select: set(['ID'])
<unary_expression> -> ['<primary_expression>', 'P71'] Select: set(['SHORT', 'STRING_LITERAL', 'INT', '(', 'FLOAT', 'LONG', 'ID'])
<primary_expression> -> ['<constant>', 'P52'] Select: set(['SHORT', 'INT', 'FLOAT', 'LONG'])
<constant> -> ['INT', 'P41'] Select: set(['INT'])
<factor_expression> -> ['+', '<unary_expression>', 'P101'] Select: set(['+'])
<unary_expression> -> ['<primary_expression>', 'P71'] Select: set(['SHORT', 'STRING_LITERAL', 'INT', '(', 'FLOAT', 'LONG', 'ID'])
<primary_expression> -> ['<constant>', 'P52'] Select: set(['SHORT', 'INT', 'FLOAT', 'LONG'])
<constant> -> ['INT', 'P41'] Select: set(['INT'])
<stmt_list> -> ['<stmt>', '<stmt_list>'] Select: set(['ID', 'while', '{', ';', 'if'])
<stmt> -> ['<expression_stmt>'] Select: set([';', 'ID'])
<expression_stmt> -> ['<expression>', ';'] Select: set(['ID'])
<expression> -> ['ID', '=', '<unary_expression>', 'P62', '<factor_expression>', 'P61'] Select: set(['ID'])
<unary_expression> -> ['<primary_expression>', 'P71'] Select: set(['SHORT', 'STRING_LITERAL', 'INT', '(', 'FLOAT', 'LONG', 'ID'])
<primary_expression> -> ['<constant>', 'P52'] Select: set(['SHORT', 'INT', 'FLOAT', 'LONG'])
<constant> -> ['FLOAT', 'P42'] Select: set(['FLOAT'])
<factor_expression> -> ['+', '<unary_expression>', 'P101'] Select: set(['+'])
<unary_expression> -> ['<primary_expression>', 'P71'] Select: set(['SHORT', 'STRING_LITERAL', 'INT', '(', 'FLOAT', 'LONG', 'ID'])
<primary_expression> -> ['<constant>', 'P52'] Select: set(['SHORT', 'INT', 'FLOAT', 'LONG'])
<constant> -> ['FLOAT', 'P42'] Select: set(['FLOAT'])
<stmt_list> -> ['null'] Select: set(['}'])
<stmt_list> -> ['<stmt>', '<stmt_list>'] Select: set(['ID', 'while', '{', ';', 'if'])
<stmt> -> ['<expression_stmt>'] Select: set([';', 'ID'])
<expression_stmt> -> ['<expression>', ';'] Select: set(['ID'])
<expression> -> ['ID', '=', '<unary_expression>', 'P62', '<factor_expression>', 'P61'] Select: set(['ID'])
<unary_expression> -> ['<primary_expression>', 'P71'] Select: set(['SHORT', 'STRING_LITERAL', 'INT', '(', 'FLOAT', 'LONG', 'ID'])
<primary_expression> -> ['<constant>', 'P52'] Select: set(['SHORT', 'INT', 'FLOAT', 'LONG'])
<constant> -> ['FLOAT', 'P42'] Select: set(['FLOAT'])
<factor_expression> -> ['*', '<unary_expression>', 'P102'] Select: set(['*'])
<unary_expression> -> ['<primary_expression>', 'P71'] Select: set(['SHORT', 'STRING_LITERAL', 'INT', '(', 'FLOAT', 'LONG', 'ID'])
<primary_expression> -> ['<constant>', 'P52'] Select: set(['SHORT', 'INT', 'FLOAT', 'LONG'])
<constant> -> ['FLOAT', 'P42'] Select: set(['FLOAT'])
<stmt_list> -> ['<stmt>', '<stmt_list>'] Select: set(['ID', 'while', '{', ';', 'if'])
<stmt> -> ['<iter_stmt>'] Select: set(['while'])
<iter_stmt> -> ['while', '(', '<primary_expression>', ')', 'P91', '<stmt>', 'P92'] Select: set(['while'])
<primary_expression> -> ['ID', 'P51'] Select: set(['ID'])
<stmt> -> ['<compound_stmt>'] Select: set(['{'])
<compound_stmt> -> ['{', '<declaration_list>', '<stmt_list>', '}'] Select: set(['{'])
<declaration_list> -> ['null'] Select: set(['ID', 'while', '{', 'null', '}', ';', 'if'])
<stmt_list> -> ['<stmt>', '<stmt_list>'] Select: set(['ID', 'while', '{', ';', 'if'])
<stmt> -> ['<expression_stmt>'] Select: set([';', 'ID'])
<expression_stmt> -> ['<expression>', ';'] Select: set(['ID'])
<expression> -> ['ID', '=', '<unary_expression>', 'P62', '<factor_expression>', 'P61'] Select: set(['ID'])
<unary_expression> -> ['<primary_expression>', 'P71'] Select: set(['SHORT', 'STRING_LITERAL', 'INT', '(', 'FLOAT', 'LONG', 'ID'])
<primary_expression> -> ['<constant>', 'P52'] Select: set(['SHORT', 'INT', 'FLOAT', 'LONG'])
<constant> -> ['FLOAT', 'P42'] Select: set(['FLOAT'])
<factor_expression> -> ['null'] Select: set([')', ';'])
<stmt_list> -> ['<stmt>', '<stmt_list>'] Select: set(['ID', 'while', '{', ';', 'if'])
<stmt> -> ['<expression_stmt>'] Select: set([';', 'ID'])
<expression_stmt> -> ['<expression>', ';'] Select: set(['ID'])
<expression> -> ['ID', '=', '<unary_expression>', 'P62', '<factor_expression>', 'P61'] Select: set(['ID'])
<unary_expression> -> ['<primary_expression>', 'P71'] Select: set(['SHORT', 'STRING_LITERAL', 'INT', '(', 'FLOAT', 'LONG', 'ID'])
<primary_expression> -> ['<constant>', 'P52'] Select: set(['SHORT', 'INT', 'FLOAT', 'LONG'])
<constant> -> ['FLOAT', 'P42'] Select: set(['FLOAT'])
<factor_expression> -> ['null'] Select: set([')', ';'])
<stmt_list> -> ['<stmt>', '<stmt_list>'] Select: set(['ID', 'while', '{', ';', 'if'])
<stmt> -> ['<expression_stmt>'] Select: set([';', 'ID'])
<expression_stmt> -> ['<expression>', ';'] Select: set(['ID'])
<expression> -> ['ID', '=', '<unary_expression>', 'P62', '<factor_expression>', 'P61'] Select: set(['ID'])
<unary_expression> -> ['<primary_expression>', 'P71'] Select: set(['SHORT', 'STRING_LITERAL', 'INT', '(', 'FLOAT', 'LONG', 'ID'])
<primary_expression> -> ['<constant>', 'P52'] Select: set(['SHORT', 'INT', 'FLOAT', 'LONG'])
<constant> -> ['INT', 'P41'] Select: set(['INT'])
<factor_expression> -> ['null'] Select: set([')', ';'])
<stmt_list> -> ['null'] Select: set(['}'])
<stmt_list> -> ['<stmt>', '<stmt_list>'] Select: set(['ID', 'while', '{', ';', 'if'])
<stmt> -> ['<expression_stmt>'] Select: set([';', 'ID'])
<expression_stmt> -> ['<expression>', ';'] Select: set(['ID'])
<expression> -> ['ID', '=', '<unary_expression>', 'P62', '<factor_expression>', 'P61'] Select: set(['ID'])
<unary_expression> -> ['<primary_expression>', 'P71'] Select: set(['SHORT', 'STRING_LITERAL', 'INT', '(', 'FLOAT', 'LONG', 'ID'])
<primary_expression> -> ['<constant>', 'P52'] Select: set(['SHORT', 'INT', 'FLOAT', 'LONG'])
<constant> -> ['INT', 'P41'] Select: set(['INT'])
<factor_expression> -> ['null'] Select: set([')', ';'])
<stmt_list> -> ['null'] Select: set(['}'])
<translation_unit> -> ['null'] Select: set(['#'])
